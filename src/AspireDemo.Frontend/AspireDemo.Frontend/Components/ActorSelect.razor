@using AspireDemo.Models.Entities
@using AspireDemo.Frontend.Models
@using Microsoft.AspNetCore.Mvc.ApplicationParts

@inject ILogger<ActorSelect> Logger 

<div class="row">
    <div class="col-1">@Index</div>
    <div class="col-4">
        <label>
            Actor:
            <select id="selectedActor" @onchange="ActorChanged">
                @if(SelectedActor is null || SelectedActor.Id == 0)
                {
                    <option selected value="0">None</option>
                } 
                
                @foreach (var actor in Actors)
                {
                    if(SelectedActor is not null && actor.Id == SelectedActor.Id)
                    {
                        Logger.LogInformation($"[ActorSelect] - Setting selected actor to {actor.FirstName} {actor.LastName}");
                        <option selected value="@actor.Id">@actor.FirstName @actor.LastName</option>
                    }
                    else
                    {
                        <option value="@actor.Id">@actor.FirstName @actor.LastName</option>
                    }
                }
            </select>
        </label>
    </div>
    <div class="col-2">
        @if(Index > 0)
        {
            <button type="button" class="btn btn-danger" @onclick="Remove">Remove</button>
        }
    </div>
</div>


@code {
    [Parameter]
    public List<Actor> Actors { get; set; }

    [Parameter]
    public Actor? SelectedActor { get; set; }

    [Parameter]
    public int Index { get; set; }

    [Parameter]
    public EventCallback<int> OnRemove { get; set; }

    [Parameter]
    public EventCallback<Actor> OnActorChanged { get; set; }

    private async Task ActorChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var actorId))
        {
            var selectedActor = Actors.FirstOrDefault(a => a.Id == actorId);
            await OnActorChanged.InvokeAsync(selectedActor);
        }
    }

    private async Task Remove()
    {
        Logger.LogInformation($"[ActorSelect] - Removing actor at index {Index}");
        await OnRemove.InvokeAsync(Index);
        StateHasChanged();
    }
}
