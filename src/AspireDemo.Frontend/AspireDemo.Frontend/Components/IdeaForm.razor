@using Microsoft.AspNetCore.Components.Forms;
@using AspireDemo.Models.Entities
@using AspireDemo.Frontend.Services

@attribute [StreamRendering]

@inject SeriesApiClient ApiClient

<h1>@Mode Idea</h1>

<hr />
@if(Genres is null || Actors is null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (Idea is not null)
    {
        <EditForm Model="@Idea"
                  OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
                  OnValidSubmit="(async () => await HandleSubmitAsync(true))">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <p>
                <label>
                    Working title:
                    <InputText @bind-Value="Idea.WorkingTitle"/>
                </label>
            </p>
            <p>
                <label>
                    Genre:
                    <InputSelect @bind-Value="Idea.Genre">
                        @if (Idea is null)
                        {
                            <option selected value="">None</option>
                        }

                        @foreach (var genre in Genres)
                        {
                            <option value="@genre.Name">@genre.Name</option>
                        }
                    </InputSelect>
                </label>
            </p>

            <p>
                <h2>Actors</h2>
                <ActorsSelector Actors="Actors"></ActorsSelector>
            </p>


            <br/>
            <button disabled="@Busy" class="btn btn-warning"
                    @onclick="CancelAsync">
                Cancel
            </button>&nbsp;
            <button disabled="@Busy" type="submit"
                    class="btn btn-primary">
                Submit
            </button>
        </EditForm>
    }
}

@code {
    // Let parent handle result of validation.
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    // Let parent handle what to do on cancel.
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    // True if add mode.
    [Parameter]
    public bool IsAdd { get; set; }

    // The Contact to upsert.
    [Parameter]
    public Idea? Idea { get; set; }

    // The database version of Contact if a concurrency issue.
    [Parameter]
    public Idea? DbIdea { get; set; }

    // Prevent multiple asynchronous operations at the same time.
    [Parameter]
    public bool Busy { get; set; }

    private List<Genre>? Genres { get; set; }
    private List<Actor>? Actors { get; set; }

    // Mode.
    private string Mode => IsAdd ? "Add" : "Edit";

    protected override async Task OnInitializedAsync()
    {
        var genres = await ApiClient.GetGenresAsync();
        if (genres is not null)
        {
            Genres = genres.ToList();
        }

        var actors = await ApiClient.GetActorsAsync();
        if (actors is not null)
        {
            Actors = actors.ToList();
        }

        await base.OnInitializedAsync();
    }



    // Ask to cancel.
    private Task CancelAsync()
    {
        return CancelRequest.InvokeAsync(null);
    }

    // Handle form submission request.
    // isValid: True when field validation passed.
    private Task HandleSubmitAsync(bool isValid)
    {
        return ValidationResult.InvokeAsync(isValid);
    }
}
