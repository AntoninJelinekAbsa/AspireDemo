@using Microsoft.AspNetCore.Components.Forms;
@using AspireDemo.Models.Entities
@using AspireDemo.Frontend.Services
@using AspireDemo.Models.Interfaces
@using AspireDemo.Frontend.Extensions

@attribute [StreamRendering]
@inject SeriesApiClient ApiClient
@inject ILogger<IdeaForm> Logger

<div class="container-md p-3 col-xxl-7 col-xl-9 col-lg-10">

    <h1 class="fs-2">@Mode Idea</h1>

    @if(Genres is null || Actors is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @if (Idea is not null)
        {
            <EditForm Model="@Idea"
                      OnInvalidSubmit="(async () => await HandleSubmitAsync(false))"
                      OnValidSubmit="(async () => await HandleSubmitAsync(true))">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0 text-muted"><i class="bi bi-film me-2"></i>Title & Genre</h5>
                        </div>
                    
                        <div class="card-body">
                            <div class="d-grid gap-3">
                                <div class="row">
                                    <label for="@Idea.WorkingTitle" class="col-lg-2 col-form-label">Working title</label>
                                    <div class="col-lg-10">
                                        <InputText @bind-Value="Idea.WorkingTitle" class="valid form-control"/>
                                    </div>
                                </div>
                                <div class="row">
                                    <label for="@Idea.Genre" class="col-lg-2 col-form-label">Genre</label>
                                    <div class="col-lg-10">
                                        <InputSelect @bind-Value="Idea.Genre" class="valid form-select">
                                            @if (Idea is null)
                                            {
                                                <option selected value="">None</option>
                                            }

                                            @foreach (var genre in Genres)
                                            {
                                                <option value="@genre.Name">@genre.Name</option>
                                            }
                                        </InputSelect>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0 text-muted"><i class="bi bi-person-video2 me-2"></i>Actors</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-3">
                            <MultiSelector 
                                TItem="Actor" 
                                Items="Actors" 
                                Label="Actor"
                                @bind-SelectedItems="SelectedActors">
                            </MultiSelector>
                        </div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0 text-muted"><i class="bi bi-bookmarks me-2"></i>Special props</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-3">
                            <MultiSelector 
                                TItem="SpecialProp" 
                                Items="SpecialProps" 
                                Label="Special property"
                                @bind-SelectedItems="SelectedSpecialProps">
                            </MultiSelector>
                        </div>
                    </div>
                </div>

                <div class="my-4 d-flex justify-content-between">
                    <button disabled="@Busy" @onclick="CancelAsync" class="btn btn-outline-secondary px-4"><i class="bi bi-x-lg me-2"></i>Cancel</button>
                    <button disabled="@Busy" type="submit" class="btn btn-success px-4"><i class="bi bi-send-plus me-3"></i>Submit Idea</button>
                </div>    
            </EditForm>
        }
    }
</div>


@code {
    // Let parent handle result of validation.
    [Parameter]
    public EventCallback<bool> ValidationResult { get; set; }

    // Let parent handle what to do on cancel.
    [Parameter]
    public EventCallback CancelRequest { get; set; }

    // True if add mode.
    [Parameter]
    public bool IsAdd { get; set; }

    // The Contact to upsert.
    [Parameter]
    public Idea? Idea { get; set; }

    // The database version of Contact if a concurrency issue.
    [Parameter]
    public Idea? DbIdea { get; set; }

    // Prevent multiple asynchronous operations at the same time.
    [Parameter]
    public bool Busy { get; set; }

    private List<Genre>? Genres { get; set; }
    private List<Actor>? Actors { get; set; }
    private List<SpecialProp>? SpecialProps { get; set; }

    private List<Actor> SelectedActors { get; set; }
    private List<SpecialProp> SelectedSpecialProps { get; set; }

    // Mode.
    private string Mode => IsAdd ? "Add" : "Edit";

    protected override async Task OnInitializedAsync()
    {
        var genres = await ApiClient.GetGenresAsync();
        if (genres is not null)
        {
            Genres = genres.ToList();
        }

        var actors = await ApiClient.GetActorsAsync();
        if (actors is not null)
        {
            Actors = actors.ToList();
        }

        var specialProps = await ApiClient.GetSpecialPropsAsync();
        if(specialProps is not null)
        {
            SpecialProps = specialProps.ToList();
        }

        if (IsAdd)
        {
            SelectedActors = new List<Actor>();
            SelectedSpecialProps = new List<SpecialProp>();
        }

        await base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {

        if (IsAdd)
        {
            SelectedActors = new List<Actor>();
            SelectedSpecialProps = new List<SpecialProp>();
        }

        return base.OnParametersSetAsync();
    }

    // Ask to cancel.
    private Task CancelAsync()
    {
        return CancelRequest.InvokeAsync(null);
    }

    // Handle form submission request.
    // isValid: True when field validation passed.
    private Task HandleSubmitAsync(bool isValid)
    {
        Logger.LogInformation("----Submitted");
        
        if (SelectedActors.Count > 2
            && SelectedSpecialProps.Count > 2
            && !string.IsNullOrEmpty(Idea.WorkingTitle)
            && !string.IsNullOrEmpty(Idea.Genre))
        {
            Logger.LogInformation("----Submitted -> VALID");
            
            Idea.Actors = JoinItemsWithAndAtTheEnd(SelectedActors.Select(x => x.Value).ToList());
            Idea.SpecialProps = JoinItemsWithAndAtTheEnd(SelectedSpecialProps.Select(x => x.Value).ToList());
            return ValidationResult.InvokeAsync(true);
        }
        Logger.LogInformation("----Submitted -> INVALID");
        return ValidationResult.InvokeAsync(false);
    }

    private string GetSelectedItems<T> (List<T> selectedItems) where T : ISelectableItem
    {
        if(selectedItems is null || selectedItems.Count == 0)
        {
            return "None selected";
        }
        
        var items = new List<string>();
        foreach (var item in selectedItems)
        {
            items.Add(item.Value);
        }

        return string.Join(",", items);
    }

    private static string JoinItemsWithAndAtTheEnd(List<string> items)
    {
        var actorsString = string.Join(", ", items);

        if (items.Count > 1)
        {
            actorsString = actorsString.ReplaceLastOccurrence(", ", " and ");
        }

        return actorsString;
    }
}
