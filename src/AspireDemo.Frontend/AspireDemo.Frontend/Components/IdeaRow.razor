@using AspireDemo.Frontend.Grid
@using AspireDemo.Frontend.Services
@using AspireDemo.Models.Entities
@using System.Globalization

@inject IIdeaFilters Filters
@inject WriterApiService WriterApiService 
@inject BossApiService BossApiService

@if (CurrentIdea is not null)
{
    <div class="row mb-2 p-1">
        <div class="col-1 fw-bold">
            @CurrentIdea.WorkingTitle
        </div>
        @if (!DeleteConfirmation)
        {
            <div class="col-1">@CurrentIdea.Genre</div>
            <div class="col-2">@CurrentIdea.Actors</div>
            <div class="col-1">@CurrentIdea.SpecialProps</div>
            <div class="col-5">
                @if (!string.IsNullOrWhiteSpace(CurrentIdea.Plot))
                {
                    @CurrentIdea.Plot

                    <div class="right-bottom" hidden="@PlotGenerationCompleted">
                        <i class="bi bi-check-circle"></i>
                    </div>
                }
                else
                {
                    <button hidden="@GeneratePlotButtonHidden" class="btn btn-secondary" @onclick="GeneratePlot" id="generatePlot">Generate Plot</button>
                    <div hidden="@(!GeneratePlotButtonHidden)" class="spinner-border" role="status">
                        <span class="sr-only"></span>
                    </div>
                }
            </div>
            <div class="col-2 fw-bolder">
                @if (!string.IsNullOrEmpty(CurrentIdea.BossReview))
                {
                    @CurrentIdea.BossReview

                    <div class="right-bottom" hidden="@PlotGenerationCompleted">
                        <i class="bi bi-check-circle"></i>
                    </div>
                }
                else
                {
                    @if (!string.IsNullOrEmpty(CurrentIdea.Plot))
                    {
                        <button hidden="@GenerateReviewButtonHidden" class="btn btn-secondary" @onclick="GenerateReview" id="generatePlot">Send to boss</button>
                        <div hidden="@(!GenerateReviewButtonHidden)" class="spinner-border" role="status">
                            <span class="sr-only"></span>
                        </div>
                    }
                }
            </div>
        }
        else
        {
            <div class="col-11">
                <DeletePrompt Confirmation="ConfirmAsync" />
            </div>
        }
        
    </div>
}

@code {
    private Idea _currentIdea = new Idea();

    // Contact being rendered.
    [Parameter]
    public Idea CurrentIdea
    {
        get => _currentIdea;
        set
        {
            if (value is not null && !value.Equals(_currentIdea))
            {
                _currentIdea = value;
                DeleteConfirmation = false;
            }
        }
    }

    // Event to raise when a contact delete is requested.
    [Parameter]
    public EventCallback DeleteIdea { get; set; }

    [Parameter]
    public EventCallback<Idea> OnIdeaChanged { get; set; }

    // Overall wrapper of functionality.
    [CascadingParameter]
    public GridWrapper? Wrapper { get; set; }

    // Returns True if conditions for delete are met.
    private bool CanDelete => !DeleteConfirmation &&
    (Wrapper?.DeleteRequestId == 0 ||
    Wrapper?.DeleteRequestId == CurrentIdea?.Id);

    // Navigate to view.
    private string ViewLink => $"View/{CurrentIdea?.Id}";

    // Confirm the delete.
    private bool DeleteConfirmation { get; set; }

    private bool GeneratePlotButtonHidden { get; set; } = false;
    private bool GenerateReviewButtonHidden { get; set; } = false;

    private bool PlotGenerationCompleted { get; set; } = false;
    private bool ReviewGenerationCompleted { get; set; } = false;

    // Called based on confirmation.
    // confirmed: True when confirmed.
    private async Task ConfirmAsync(bool confirmed)
    {
        if (confirmed)
        {
            await DeleteAsync();
        }
        else
        {
            DeleteConfirmation = false;

            if (Wrapper is not null)
            {
                await Wrapper.DeleteRequested.InvokeAsync(0);
            }
        }
    }

    /// Set delete to true.
    private async Task DeleteRequestAsync()
    {
        if (Wrapper?.DeleteRequestId == 0)
        {
            DeleteConfirmation = true;
            await Wrapper.DeleteRequested.InvokeAsync(CurrentIdea.Id);
        }
    }

    // Deletes the Contact.
    private Task DeleteAsync()
    {
        return DeleteIdea.InvokeAsync(this);
    }
    
    private async Task GeneratePlot()
    {
        GeneratePlotButtonHidden = true;

        string plot = "";

        WriterApiService.PlotUpdateReceivedCallback = async (plotUpdate) =>
        {
            plot += plotUpdate;
            CurrentIdea.Plot = plot;
            StateHasChanged();
        };
        
        await WriterApiService.GetPlotStream(CurrentIdea, new CancellationToken());

        await OnIdeaChanged.InvokeAsync(CurrentIdea);
        PlotGenerationCompleted = true;
    }

    private async Task GenerateReview()
    {
        GenerateReviewButtonHidden = true;
        
        string review = "";

        BossApiService.ReviewUpdateReceivedCallback = async (reviewUpdate) =>
        {
            review += reviewUpdate;
            CurrentIdea.BossReview = review;
            StateHasChanged();
        };

        await BossApiService.GetReviewStream(CurrentIdea, new CancellationToken());
        
        await OnIdeaChanged.InvokeAsync(CurrentIdea);
        ReviewGenerationCompleted = true;
    }
}
