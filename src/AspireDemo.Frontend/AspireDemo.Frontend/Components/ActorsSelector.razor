@using AspireDemo.Models.Entities
@using AspireDemo.Frontend.Models

@inject ILogger<ActorSelect> Logger

<div class="row">
    <div class="col">
        @for (int i = 0; i < SelectedActors.Count; i++)
        {
            Logger.LogInformation($"[Selector] - Rendering actor at index {i}");
            <ActorSelect Actors="Actors"
                         Index="i"
                         OnRemove="ActorRemovedCallback"
                         OnActorChanged="ActorChangedCallback"
                         SelectedActor="@SelectedActors[i]">
            </ActorSelect>
        }
    </div>
</div>
<div class="row">
    <div class="col">
        <button type="button" class="btn btn-primary" @onclick="AddActor">Add another</button>
    </div>
</div>


@code
{
    [Parameter]
    public List<Actor> Actors { get; set; }

    [Parameter]
    public List<Actor> SelectedActors { get; set; }

    [Parameter]
    public EventCallback<List<Actor>> SelectedActorsChanged { get; set; }

    private async Task AddActor()
    {
        SelectedActors.Add(new Actor(){Id = 0});
        await SelectedActorsChanged.InvokeAsync(SelectedActors);
    }

    private async Task ActorRemovedCallback(int index)
    {
        Logger.LogInformation($"[Selector] - Removing actor at index {index}");
        SelectedActors.RemoveAt(index);
        await SelectedActorsChanged.InvokeAsync(SelectedActors);
        StateHasChanged();
    }

    protected override Task OnInitializedAsync()
    {
        if (SelectedActors is null)
        {
            SelectedActors = new List<Actor>();
        }

        if(SelectedActors.Count == 0)
        {
            AddActor();
        }

        return base.OnInitializedAsync();
    }

    private async Task ActorChangedCallback(Actor actor)
    {
        if (!SelectedActors.Contains(actor))
        {
            SelectedActors.Add(actor);
        }

        if (SelectedActors.Count(x => x.Id > 0) > 0)
        {
            SelectedActors.RemoveAll(x => x.Id == 0);
        }
        await SelectedActorsChanged.InvokeAsync(SelectedActors);
    }

    private string GetSelectedActors()
    {
        var actors = new List<string>();
        foreach (var actor in SelectedActors)
        {
            actors.Add($"{actor.FirstName} {actor.LastName}");
        }

        return string.Join(",", actors);
    }
}
