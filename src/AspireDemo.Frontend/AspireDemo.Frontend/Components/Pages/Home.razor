@page "/"
@page "/{Page:int}"

@using AspireDemo.Models.Entities
@using AspireDemo.Frontend.Grid
@using AspireDemo.Frontend.Services
@rendermode InteractiveServer

@inject IIdeaFilters Filters
@inject SeriesApiClient ApiClient
@inject NavigationManager Navigation

<PageTitle>Cool streaming - Ideas</PageTitle>

<main>
    <header class="p-3 text-bg-dark mb-3">
        <div class="container-fluid align-items-left">
            <span class="fs-3">
                Cool streaming - Ideas
            </span>
        </div>
      </header>

    <div class="container-fluid pb-3">

        <GridWrapper @ref="Wrapper"
                     FilterChanged="ReloadAsync"
                     DeleteRequested="id => Wrapper.DeleteRequestId = id">
            
                <div class="row text-bg-primary p-2 mb-3 fw-bold">
                    <div class="col-1">
                        Title
                    </div>
                    <div class="col-1">
                        Genre
                    </div>
                    <div class="col-2">
                        Actors
                    </div>
                    <div class="col-1">
                        Additional settings
                    </div>
                    <div class="col-5">
                        Plot
                    </div>
                    <div class="col-2">
                        Boss review
                    </div>
                   
        
                </div>
                @if (Filters.Loading || Ideas is null)
                {
                    <div class="row">
                        <div class="col-12 alert alert-info">
                            Loading...
                        </div>
                    </div>
                }
                @if (Ideas is not null && Ideas.Count == 0)
                {
                    <div class="row">
                        <div class="col-12 alert alert-warning">
                            No ideas found.
                        </div>
                    </div>
                }
                @if (Ideas is not null)
                {
                    @foreach (var idea in Ideas)
                    {
                        <IdeaRow 
                            @key=idea 
                            CurrentIdea="@idea"
                            DeleteIdea="DeleteIdeaAsync"
                            OnIdeaChanged="UpdateIdeaAsync"/>
                    }
                }
            
        </GridWrapper>
        
        <NavLink class="nav-link" href="add">
            <span class="oi oi-plus" aria-hidden="true"></span> Add New Idea
        </NavLink>
    </div>
</main>

@code
{
    // The current page.
    [Parameter]
    public int Page
    {
        get => Filters.PageHelper.Page;
        set
        {
            Filters.PageHelper.Page = value;
        }
    }

    // A wrapper for grid-related activity (like delete).
    private GridWrapper Wrapper { get; set; } = new GridWrapper();

    // Current page of Contact.
    private ICollection<Idea>? Ideas { get; set; }

    // Helper method to set disabled on class for paging.
    // condition: When the element is active (and therefore should not be disabled).
    //            Returns the string literal "disabled" or an empty string.
    private string IsDisabled(bool condition) =>
        !Filters.Loading && condition ? "" : "disabled";

    // Keeps track of the last page loaded.
    private int _lastPage = -1;

    // Main logic when getting started.
    protected override void OnAfterRender(bool firstRender)
    {
        // Ensure we're on the same (correct) page.
        if (_lastPage < 1)
        {
            Navigation.NavigateTo("/1");
            return;
        }

        // Normalize the page values.
        if (Filters.PageHelper.PageCount > 0)
        {
            if (Page < 1)
            {
                Navigation.NavigateTo("/1");
                return;
            }
            if (Page > Filters.PageHelper.PageCount)
            {
                Navigation.NavigateTo($"/{Filters.PageHelper.PageCount}");
                return;
            }
        }
        base.OnAfterRender(firstRender);
    }

    private async Task UpdateIdeaAsync(Idea idea)
    {
        await ApiClient.UpdateIdea(idea);
    }

    // Triggered for any paging update.
    protected override async Task OnParametersSetAsync()
    {
        // Make sure the page really changed.
        if (Page != _lastPage)
        {
            _lastPage = Page;
            await ReloadAsync();
        }
        await base.OnParametersSetAsync();
    }

    // Used to toggle the grid sort. Will either switch to "ascending" on a new
    // column, or toggle between "ascending" and "descending" on a column with the
    // sort already set.
    private Task ToggleAsync(IdeaFilterColumns col)
    {
        if (Filters.SortColumn == col)
        {
            Filters.SortAscending = !Filters.SortAscending;
        }
        else
        {
            Filters.SortColumn = col;
        }
        return ReloadAsync();
    }

    private async Task DeleteIdeaAsync()
    {
        // using var context = DbFactory.CreateDbContext();
        // Filters.Loading = true;

        // if (Wrapper is not null && context.Contacts is not null)
        // {
        //     var contact = await context.Contacts
        //         .FirstAsync(c => c.Id == Wrapper.DeleteRequestId);

        //     if (contact is not null)
        //     {
        //         context.Contacts?.Remove(contact);
        //         await context.SaveChangesAsync();
        //     }
        // }

        // Filters.Loading = false;

        await ReloadAsync();
    }

    // Reload page based on filters and paging controls.
    private async Task ReloadAsync()
    {
        if (Filters.Loading || Page < 1)
        {
            return;
        }

        Filters.Loading = true;

        if (Wrapper is not null)
        {
            Wrapper.DeleteRequestId = 0;
        }

        Ideas = await ApiClient.GetIdeasAsync();

        Filters.Loading = false;
    }
}

