
@typeparam TItem where TItem : ISelectableItem
@inject ILogger<GenericSelect<TItem>> Logger

<div class="row">
    <label class="col-lg-2 col-form-label">@LabelText</label>
    <div class="col-lg-10">
        <div class="d-flex align-items-center">

            <select @onchange="ItemChanged" class="form-select">
                @if (SelectedItem is null || SelectedItem.Id == 0)
                {
                    <option selected value="0">None</option>
                }

                @foreach (var item in Items)
                {
                    if (SelectedItem is not null && item.Id == SelectedItem.Id)
                    {
                        Logger.LogDebug($"[ItemSelect] - Setting selected item to {item.Value}");
                        <option selected value="@item.Id">@item.Value</option>
                    }
                    else
                    {
                        <option value="@item.Id">@item.Value</option>
                    }
                }
            </select>

            @if (Index > 0)
            {
                <button class="btn btn-sm btn-outline-danger ms-3 px-2" @onclick="Remove"><i class="bi bi-trash"></i></button>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string LabelText { get; set; }

    [Parameter]
    public List<TItem> Items { get; set; }

    [Parameter]
    public TItem? SelectedItem { get; set; }

    [Parameter]
    public int Index { get; set; }

    [Parameter]
    public EventCallback<int> OnRemove { get; set; }

    [Parameter]
    public EventCallback<TItem> OnItemChanged { get; set; }

    private async Task ItemChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var itemId))
        {
            var selectedItem = Items.FirstOrDefault(a => a.Id == itemId);
            await OnItemChanged.InvokeAsync(selectedItem);
        }
    }

    private async Task Remove()
    {
        Logger.LogInformation($"[ItemSelect] - Removing item at index {Index}");
        await OnRemove.InvokeAsync(Index);
        StateHasChanged();
    }
}
